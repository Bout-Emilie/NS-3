/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
 /*
  * Copyright (c) 2006,2007 INRIA
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation;
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  * Author: Mathieu Lacage, <mathieu.lacage@sophia.inria.fr>
  */
 
 #ifndef YANS_WIFI_CHANNEL_H
 #define YANS_WIFI_CHANNEL_H
 
 #include "ns3/channel.h"
 
 namespace ns3 {
 
 class NetDevice;
 class PropagationLossModel;
 class PropagationDelayModel;
 class YansWifiPhy;
 class Packet;
 class Time;
 class WifiPpdu;
 
 class YansWifiChannel : public Channel
 {
 public:
   static TypeId GetTypeId (void);
 
   YansWifiChannel ();
   virtual ~YansWifiChannel ();
 
   //inherited from Channel.
   virtual std::size_t GetNDevices (void) const;
   virtual Ptr<NetDevice> GetDevice (std::size_t i) const;
 
   void Add (Ptr<YansWifiPhy> phy);
 
   void SetPropagationLossModel (const Ptr<PropagationLossModel> loss);
   void SetPropagationDelayModel (const Ptr<PropagationDelayModel> delay);
 
   void Send (Ptr<YansWifiPhy> sender, Ptr<const WifiPpdu> ppdu, double txPowerDbm) const;
 
   int64_t AssignStreams (int64_t stream);
 
 
 private:
   typedef std::vector<Ptr<YansWifiPhy> > PhyList;
 
   static void Receive (Ptr<YansWifiPhy> receiver, Ptr<WifiPpdu> ppdu, double txPowerDbm);
 
   PhyList m_phyList;                   
   Ptr<PropagationLossModel> m_loss;    
   Ptr<PropagationDelayModel> m_delay;  
 };
 
 } //namespace ns3
 
 #endif /* YANS_WIFI_CHANNEL_H */
